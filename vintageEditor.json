{
  "id": "vintageEditor",
  "name": "Vintage App Editor",
  "version": "2.1",
  "icon": "âœŽ",
  "description": "Advanced editor for creating VintageOS installable .json apps. Tabs, JSON lint, syntax highlighting, and more.",
  "author": "Vintage Software",
  "desktopIcon": true,
  "code": "// === Robust VintageOS App Editor ===\nconst container = app.rootElement;\ncontainer.innerHTML = '';\ncontainer.style.display = 'flex';\ncontainer.style.flexDirection = 'column';\ncontainer.style.height = '100%';\ncontainer.style.overflow = 'hidden';\n\n// --- State ---\nconst state = {\n  filePath: null,\n  content: '',\n  modified: false,\n  fontSize: 14,\n  showLineNumbers: true,\n  showPreview: false,\n  isMarkdown: false,\n  error: null,\n  highlightMode: 'auto', // 'json', 'js', 'md', or 'auto'\n};\n\n// --- Toolbar ---\nconst toolbar = document.createElement('div');\ntoolbar.style.display = 'flex';\ntoolbar.style.alignItems = 'center';\ntoolbar.style.gap = '4px';\ntoolbar.style.padding = '4px 6px';\ntoolbar.style.borderBottom = '1px solid var(--main-border)';\n\nfunction makeBtn(label, cb, title) {\n  const btn = document.createElement('button');\n  btn.textContent = label;\n  btn.title = title||label;\n  btn.tabIndex = -1;\n  btn.onclick = cb;\n  return btn;\n}\n\nconst newBtn = makeBtn('New', newFile, 'New file');\nconst openBtn = makeBtn('Open', openFile, 'Open from Documents');\nconst saveBtn = makeBtn('Save', saveFile, 'Save (Ctrl+S)');\nconst saveAsBtn = makeBtn('Save As', saveAs, 'Save As...');\nconst importBtn = makeBtn('Import', importFile, 'Import JSON');\nconst exportBtn = makeBtn('Export', exportFile, 'Export .json');\nconst lintBtn = makeBtn('Lint', validateJSON, 'Validate JSON');\nconst lineBtn = makeBtn('Lines', toggleLines, 'Show/Hide line numbers');\nconst fontSm = makeBtn('A-', () => setFont(state.fontSize - 1), 'Smaller font');\nconst fontLg = makeBtn('A+', () => setFont(state.fontSize + 1), 'Larger font');\nconst previewBtn = makeBtn('Preview', togglePreview, 'Toggle Markdown preview');\nconst helpBtn = makeBtn('Help', showHelp, 'Editor help');\n\n// Add buttons\n[ newBtn, openBtn, saveBtn, saveAsBtn, importBtn, exportBtn, lintBtn, lineBtn, fontSm, fontLg, previewBtn, helpBtn ].forEach(b => toolbar.appendChild(b));\n\n// --- Editor Area ---\nconst editorWrap = document.createElement('div');\neditorWrap.style.flex = '1';\neditorWrap.style.display = 'flex';\neditorWrap.style.overflow = 'hidden';\neditorWrap.style.background = 'var(--terminal-bg)';\n\nconst lineNumbers = document.createElement('pre'); // Use <pre> for line numbers\ndocument.body._vos_lineNumbers = lineNumbers; // debug\nlineNumbers.style.userSelect = 'none';\nlineNumbers.style.background = '#161616';\nlineNumbers.style.color = '#666';\nlineNumbers.style.padding = '7px 3px 7px 3px';\nlineNumbers.style.fontFamily = 'monospace';\nlineNumbers.style.textAlign = 'right';\nlineNumbers.style.fontSize = state.fontSize + 'px';\nlineNumbers.style.minWidth = '1.5em'; // compact\nlineNumbers.style.width = 'auto';\nlineNumbers.style.borderRight = '1px solid var(--main-border)';\nlineNumbers.style.height = '100%';\nlineNumbers.style.overflow = 'hidden';\nlineNumbers.style.margin = '0';\nlineNumbers.style.lineHeight = 'inherit';\nlineNumbers.style.display = 'block';\n\nconst textarea = document.createElement('textarea');\ntextarea.style.flex = '1';\ntextarea.style.padding = '7px';\ntextarea.style.border = 'none';\ntextarea.style.outline = 'none';\ntextarea.style.resize = 'none';\ntextarea.style.fontSize = state.fontSize + 'px';\ntextarea.style.fontFamily = 'monospace';\ntextarea.style.backgroundColor = 'transparent';\ntextarea.style.color = 'var(--main-text)';\ntextarea.style.height = '100%';\ntextarea.autocapitalize = 'off';\ntextarea.autocorrect = 'off';\ntextarea.spellcheck = false;\ntextarea.wrap = 'off';\n\n// --- Syntax Highlighted Preview (read-only, for JSON/JS, not Markdown) ---\nconst highlightPanel = document.createElement('pre');\nhighlightPanel.style.flex = '1';\nhighlightPanel.style.padding = '7px';\nhighlightPanel.style.margin = '0';\nhighlightPanel.style.background = 'transparent';\nhighlightPanel.style.color = 'var(--main-text)';\nhighlightPanel.style.overflow = 'auto';\nhighlightPanel.style.display = 'none';\nhighlightPanel.style.fontSize = state.fontSize + 'px';\nhighlightPanel.style.fontFamily = 'monospace';\nhighlightPanel.style.borderLeft = '1px solid var(--main-border)';\n\n// --- Markdown Preview Panel ---\nconst previewPanel = document.createElement('div');\npreviewPanel.style.flex = '1';\npreviewPanel.style.background = '#222';\npreviewPanel.style.color = 'var(--main-text)';\npreviewPanel.style.padding = '16px';\npreviewPanel.style.overflow = 'auto';\npreviewPanel.style.display = 'none';\npreviewPanel.style.borderLeft = '1px solid var(--main-border)';\npreviewPanel.style.fontSize = state.fontSize + 'px';\n\n// --- Line Number Update ---\nfunction updateLineNumbers() {\n  if (!state.showLineNumbers) { lineNumbers.style.display = 'none'; return; }\n  lineNumbers.style.display = 'block';\n  const lines = textarea.value.split('\\n').length;\n  let out = '';\n  for (let i=1; i<=lines; ++i) out += i + '\\n';\n  lineNumbers.textContent = '\\n' + out; // Start with a blank line for perfect alignment\n}\n\nfunction setFont(sz) {\n  if (sz < 8) sz = 8; if (sz > 28) sz = 28;\n  state.fontSize = sz;\n  textarea.style.fontSize = sz+'px';\n  lineNumbers.style.fontSize = sz+'px';\n  highlightPanel.style.fontSize = sz+'px';\n  previewPanel.style.fontSize = sz+'px';\n}\n\nfunction toggleLines() {\n  state.showLineNumbers = !state.showLineNumbers;\n  updateLineNumbers();\n}\n\nfunction togglePreview() {\n  state.showPreview = !state.showPreview;\n  previewPanel.style.display = state.showPreview && state.isMarkdown ? 'block' : 'none';\n  highlightPanel.style.display = state.showPreview && !state.isMarkdown ? 'block' : 'none';\n  textarea.style.display = state.showPreview ? 'none' : 'block';\n  updatePreview();\n}\n\nfunction updatePreview() {\n  if (state.isMarkdown && state.showPreview) {\n    previewPanel.innerHTML = marked(textarea.value);\n  } else if (state.showPreview) {\n    highlightPanel.innerHTML = highlight(textarea.value, state.highlightMode);\n  }\n}\n\n// --- Status Bar ---\nconst statusBar = document.createElement('div');\nstatusBar.style.padding = '3px 8px';\nstatusBar.style.fontSize = '12px';\nstatusBar.style.borderTop = '1px solid var(--main-border)';\nstatusBar.style.background = 'rgba(0,0,0,0.05)';\nstatusBar.style.color = 'var(--main-text)';\nstatusBar.textContent = 'Ready';\n\nfunction updateStatusBar(msg) {\n  let name = state.filePath ? state.filePath.split('/').pop() : 'New File';\n  let dirty = state.modified ? ' *' : '';\n  let info = `${name}${dirty} | ${state.fontSize}px`;\n  if (msg) info += ' | ' + msg;\n  statusBar.textContent = info;\n  if (state.error) { statusBar.textContent += ' | ' + state.error; }\n}\n\n// --- Main Layout ---\neditorWrap.appendChild(lineNumbers);\neditorWrap.appendChild(textarea);\neditorWrap.appendChild(highlightPanel);\neditorWrap.appendChild(previewPanel);\ncontainer.appendChild(toolbar);\ncontainer.appendChild(editorWrap);\ncontainer.appendChild(statusBar);\n\n// --- Markdown parser (basic) ---\nfunction marked(md) {\n  // Only very basic markdown; no XSS allowed!\n  let html = md\n    .replace(/&/g, '&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')\n    .replace(/^### (.*)$/gm, '<h3>$1</h3>')\n    .replace(/^## (.*)$/gm, '<h2>$1</h2>')\n    .replace(/^# (.*)$/gm, '<h1>$1</h1>')\n    .replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>')\n    .replace(/\\*(.+?)\\*/g, '<em>$1</em>')\n    .replace(/`([^`]+?)`/g, '<code>$1</code>')\n    .replace(/^- (.+)$/gm, '<li>$1</li>')\n    .replace(/\\[(.+?)\\]\\((.+?)\\)/g, '<a href=\"$2\">$1</a>');\n  html = html.replace(/(<li>.*<\\/li>)/gm, '<ul>$1</ul>');\n  html = html.replace(/\\n{2,}/g, '<br><br>');\n  return html;\n}\n\n// --- Syntax highlighter for JSON/JS ---\nfunction highlight(code, mode) {\n  // Simple JSON/JS highlighter\n  if (mode==='auto') mode = detectMode();\n  code = code.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n  if (mode==='json') {\n    return code.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|\\d+(\\.\\d+)?)/g,\n      function(m) {\n        let cls = 'color:#ffb62c;';\n        if (/^\".*\":$/.test(m)) cls = 'color:#33ff33;'; // key\n        else if (/^\"/.test(m)) cls = 'color:#ffb62c;'; // string\n        else if (/true|false/.test(m)) cls = 'color:#33d1ff;'; // bool\n        else if (/null/.test(m)) cls = 'color:#ffe166;'; // null\n        else if (/^\\d/.test(m)) cls = 'color:#f99;';   // number\n        return `<span style='${cls}'>${m}</span>`;\n      });\n  }\n  if (mode==='js') {\n    // keywords\n    return code.replace(/(\\b(function|var|let|const|if|else|for|while|return|try|catch|throw|new|class|this)\\b)/g,\n      \"<span style='color:#33d1ff;'>$1</span>\")\n      .replace(/(\"[^\"]*\"|'[^']*'|`[^`]*`)/g, \"<span style='color:#ffb62c;'>$1</span>\")\n      .replace(/(\\/\\/.*)/g, \"<span style='color:#666'>$1</span>\");\n  }\n  return code;\n}\nfunction detectMode() {\n  if (!state.filePath) return 'json';\n  if (state.filePath.endsWith('.json')) return 'json';\n  if (state.filePath.endsWith('.js')) return 'js';\n  if (state.filePath.endsWith('.md')) return 'md';\n  return 'json';\n}\n\n// --- TAB support + indent/outdent ---\ntextarea.addEventListener('keydown', function(e) {\n  if (e.key === 'Tab') {\n    e.preventDefault();\n    const val = textarea.value;\n    const start = textarea.selectionStart;\n    const end = textarea.selectionEnd;\n    if (start !== end) {\n      // Multi-line indent/outdent\n      const lines = val.substring(start, end).split('\\n');\n      if (!e.shiftKey) {\n        // Indent\n        for(let i=0;i<lines.length;++i) lines[i] = '\\t'+lines[i];\n      } else {\n        // Outdent\n        for(let i=0;i<lines.length;++i) lines[i]=lines[i].replace(/^\\t|^  /,'');\n      }\n      const before = val.substring(0, start);\n      const after = val.substring(end);\n      const newSel = before.lastIndexOf('\\n')+1;\n      const replaced = lines.join('\\n');\n      textarea.value = before + replaced + after;\n      textarea.selectionStart = start + (e.shiftKey?-1:1)*lines.length;\n      textarea.selectionEnd = textarea.selectionStart + replaced.length;\n    } else {\n      // Single tab\n      textarea.value = val.substring(0, start) + '\\t' + val.substring(end);\n      textarea.selectionStart = textarea.selectionEnd = start + 1;\n    }\n    state.content = textarea.value;\n    updateLineNumbers();\n    updateStatusBar();\n    state.modified = true;\n    updatePreview();\n  } else if (e.key === 's' && (e.ctrlKey||e.metaKey)) {\n    e.preventDefault(); saveFile();\n  }\n});\n\n// --- Input events ---\ntextarea.addEventListener('input', function() {\n  state.content = textarea.value;\n  state.modified = true;\n  state.isMarkdown = (detectMode()==='md');\n  updateLineNumbers();\n  updateStatusBar();\n  if (state.showPreview) updatePreview();\n});\ntextarea.addEventListener('scroll', function() {\n  lineNumbers.scrollTop = textarea.scrollTop;\n});\n\n// --- Functions ---\nfunction newFile() {\n  if (state.modified && !confirm('Discard unsaved changes?')) return;\n  state.filePath = null;\n  state.content = '';\n  state.modified = false;\n  textarea.value = '';\n  state.error = null;\n  updateLineNumbers();\n  updateStatusBar('New file');\n  if (state.showPreview) updatePreview();\n}\nfunction openFile() {\n  if (state.modified && !confirm('Discard unsaved changes?')) return;\n  let files = app.api.fs.listFiles('/Documents');\n  if (!files) return app.api.ui.alert('No files in /Documents');\n  let pick = files.filter(f=>f.type==='file'&&/\\.(json|js|txt|md)$/i.test(f.name));\n  if (!pick.length) return app.api.ui.alert('No supported files found');\n  let msg = 'Select file:\\n';\n  pick.forEach((f,i)=>msg += `${i+1}. ${f.name}\\n`);\n  let idx = parseInt(app.api.ui.prompt(msg));\n  if (!idx||!pick[idx-1]) return;\n  let file = pick[idx-1];\n  let content = app.api.fs.readFile(file.path);\n  textarea.value = content;\n  state.filePath = file.path;\n  state.content = content;\n  state.modified = false;\n  state.error = null;\n  state.isMarkdown = (detectMode()==='md');\n  updateLineNumbers();\n  updateStatusBar('Opened '+file.name);\n  if(state.showPreview) updatePreview();\n}\nfunction saveFile() {\n  let path = state.filePath;\n  if (!path) return saveAs();\n  try {\n    app.api.fs.writeFile(path, textarea.value);\n    state.modified = false;\n    state.error = null;\n    updateStatusBar('Saved '+path.split('/').pop());\n    app.api.ui.showNotification('Saved.');\n  } catch(e) {\n    state.error = 'Save failed: '+e.message;\n    updateStatusBar();\n    app.api.ui.alert(state.error);\n  }\n}\nfunction saveAs() {\n  let name = app.api.ui.prompt('Save as file name:', state.filePath ? state.filePath.split('/').pop() : 'untitled.json');\n  if (!name) return;\n  if (!/\\.(json|js|md|txt)$/i.test(name)) name+='.json';\n  let p = '/Documents/'+name;\n  if (app.api.fs.fileExists(p)&&!app.api.ui.confirm('Overwrite '+name+'?')) return;\n  try {\n    app.api.fs.writeFile(p, textarea.value);\n    state.filePath = p;\n    state.modified = false;\n    state.error = null;\n    updateStatusBar('Saved as '+name);\n    app.api.ui.showNotification('Saved as '+name);\n  } catch(e) {\n    state.error = 'Save failed: '+e.message;\n    updateStatusBar();\n    app.api.ui.alert(state.error);\n  }\n}\nfunction importFile() {\n  let input = document.createElement('input');\n  input.type = 'file';\n  input.accept = '.json,.js,.md,.txt';\n  input.onchange = () => {\n    if (!input.files.length) return;\n    let reader = new FileReader();\n    reader.onload = e => {\n      textarea.value = e.target.result;\n      state.content = textarea.value;\n      state.modified = true;\n      state.filePath = null;\n      state.error = null;\n      updateLineNumbers();\n      updateStatusBar('Imported');\n      if (state.showPreview) updatePreview();\n    };\n    reader.readAsText(input.files[0]);\n  };\n  input.click();\n}\nfunction exportFile() {\n  let out = textarea.value;\n  let name = state.filePath ? state.filePath.split('/').pop() : 'exported.json';\n  let blob = new Blob([\"\\uFEFF\"+out], {type:'application/json'});\n  let url = URL.createObjectURL(blob);\n  let a = document.createElement('a');\n  a.href = url; a.download = name; a.click();\n  setTimeout(()=>URL.revokeObjectURL(url), 1500);\n  app.api.ui.showNotification('Exported '+name);\n}\nfunction validateJSON() {\n  let val = textarea.value;\n  try {\n    JSON.parse(val);\n    state.error = null;\n    updateStatusBar('Valid JSON');\n    app.api.ui.showNotification('Valid JSON syntax.');\n  } catch(e) {\n    state.error = 'JSON Error: '+e.message;\n    updateStatusBar();\n    app.api.ui.alert(state.error);\n  }\n}\nfunction showHelp() {\n  app.api.ui.alert(\n`VINTAGE APP EDITOR\\n\\nFeatures:\\n- TAB support (also multi-line indent/outdent with Tab/Shift+Tab)\\n- Line numbers\\n- JSON validation\\n- Syntax highlight (JSON/JS)\\n- Markdown preview\\n- Import/Export\\n- Font size, undo/redo (Ctrl+Z/Y)\\n\\nTo create installable .json apps, structure:\\n{\\n  \"id\": \"myAppId\",\\n  \"name\": \"My App\",\\n  \"version\": \"1.0\",\\n  \"icon\": \"emoji\",\\n  \"description\": \"desc\",\\n  \"author\": \"Your Name\",\\n  \"desktopIcon\": true,\\n  \"code\": \"// JavaScript here\"\\n}\\n\\nUse the Preview button for .md, or syntax highlight for .json/.js.\\n`);\n}\n\n// --- INIT ---\nfunction restore() {\n  updateLineNumbers();\n  setFont(state.fontSize);\n  updateStatusBar();\n  textarea.value = state.content;\n  if (state.showPreview) updatePreview();\n}\nrestore();\ntextarea.focus();\n\n// --- Auto detect mode on open ---\ntextarea.addEventListener('input', function() {\n  let mode = detectMode();\n  state.isMarkdown = (mode==='md');\n  state.highlightMode = mode;\n  if (state.showPreview) updatePreview();\n});\n\n// --- Handle resizing ---\nwindow.addEventListener('resize', ()=>updateLineNumbers());\n\n// --- Keyboard shortcuts ---\ntextarea.addEventListener('keydown', function(e) {\n  if (e.key==='z' && (e.ctrlKey||e.metaKey)) setTimeout(updateLineNumbers,1);\n  if (e.key==='y' && (e.ctrlKey||e.metaKey)) setTimeout(updateLineNumbers,1);\n});\n\n// --- Final Assembly ---\n// (already added)\n"
}