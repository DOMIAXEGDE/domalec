{
  "id": "vintageEditor",
  "name": "Vintage Text Editor",
  "version": "1.0",
  "icon": "âœŽ",
  "description": "Text editor with Markdown support",
  "author": "System",
  "desktopIcon": true,
  "code": "// Create main UI elements\nconst container = app.rootElement;\ncontainer.style.display = 'flex';\ncontainer.style.flexDirection = 'column';\ncontainer.style.height = '100%';\ncontainer.style.overflow = 'hidden';\n\n// App state\nvar state = {\n  currentFile: null,\n  content: '',\n  modified: false,\n  markdownMode: false,\n  showPreview: false\n};\n\n// Create toolbar\nvar toolbar = document.createElement('div');\ntoolbar.style.padding = '5px';\ntoolbar.style.borderBottom = '1px solid var(--main-border)';\ntoolbar.style.display = 'flex';\ntoolbar.style.gap = '5px';\n\n// Create toolbar buttons\nvar newBtn = document.createElement('button');\nnewBtn.textContent = 'New';\nnewBtn.onclick = function() { newFile(); };\n\nvar openBtn = document.createElement('button');\nopenBtn.textContent = 'Open';\nopenBtn.onclick = function() { openFile(); };\n\nvar saveBtn = document.createElement('button');\nsaveBtn.textContent = 'Save';\nsaveBtn.onclick = function() { saveFile(); };\n\nvar saveAsBtn = document.createElement('button');\nsaveAsBtn.textContent = 'Save As';\nsaveAsBtn.onclick = function() { saveFileAs(); };\n\nvar markdownBtn = document.createElement('button');\nmarkdownBtn.textContent = 'Markdown';\nmarkdownBtn.style.opacity = '0.6';\nmarkdownBtn.onclick = function() {\n  state.markdownMode = !state.markdownMode;\n  markdownBtn.style.opacity = state.markdownMode ? '1' : '0.6';\n  if (state.markdownMode && state.showPreview) {\n    renderMarkdown();\n  }\n};\n\nvar previewBtn = document.createElement('button');\npreviewBtn.textContent = 'Preview';\npreviewBtn.style.opacity = '0.6';\npreviewBtn.onclick = function() {\n  state.showPreview = !state.showPreview;\n  previewBtn.style.opacity = state.showPreview ? '1' : '0.6';\n  togglePreview();\n};\n\nvar helpBtn = document.createElement('button');\nhelpBtn.textContent = 'Help';\nhelpBtn.onclick = function() { showHelp(); };\n\n// Add buttons to toolbar\ntoolbar.appendChild(newBtn);\ntoolbar.appendChild(openBtn);\ntoolbar.appendChild(saveBtn);\ntoolbar.appendChild(saveAsBtn);\ntoolbar.appendChild(markdownBtn);\ntoolbar.appendChild(previewBtn);\ntoolbar.appendChild(helpBtn);\n\n// Create editor area\nvar editorArea = document.createElement('div');\neditorArea.style.display = 'flex';\neditorArea.style.flex = '1';\neditorArea.style.overflow = 'hidden';\n\nvar textarea = document.createElement('textarea');\ntextarea.style.flex = '1';\ntextarea.style.padding = '5px';\ntextarea.style.border = 'none';\ntextarea.style.outline = 'none';\ntextarea.style.resize = 'none';\ntextarea.style.fontSize = '14px';\ntextarea.style.fontFamily = 'monospace';\ntextarea.style.backgroundColor = '#222';\ntextarea.style.color = 'var(--main-text)';\ntextarea.spellcheck = false;\n\nvar previewPanel = document.createElement('div');\npreviewPanel.style.flex = '1';\npreviewPanel.style.padding = '10px';\npreviewPanel.style.overflow = 'auto';\npreviewPanel.style.display = 'none';\npreviewPanel.style.borderLeft = '1px solid var(--main-border)';\n\neditorArea.appendChild(textarea);\neditorArea.appendChild(previewPanel);\n\n// Create status bar\nvar statusBar = document.createElement('div');\nstatusBar.style.padding = '3px 5px';\nstatusBar.style.borderTop = '1px solid var(--main-border)';\nstatusBar.style.fontSize = '12px';\nstatusBar.textContent = 'New File';\n\n// Assemble UI\ncontainer.appendChild(toolbar);\ncontainer.appendChild(editorArea);\ncontainer.appendChild(statusBar);\n\n// Event handlers\ntextarea.oninput = function() {\n  state.content = textarea.value;\n  state.modified = true;\n  updateStatusBar();\n  if (state.markdownMode && state.showPreview) {\n    renderMarkdown();\n  }\n};\n\ntextarea.onkeydown = function(e) {\n  // Handle tab key\n  if (e.key === 'Tab') {\n    e.preventDefault();\n    var start = textarea.selectionStart;\n    var end = textarea.selectionEnd;\n    \n    // Insert 2 spaces for tab\n    textarea.value = textarea.value.substring(0, start) + '  ' + textarea.value.substring(end);\n    textarea.selectionStart = textarea.selectionEnd = start + 2;\n    \n    // Update state\n    state.content = textarea.value;\n    state.modified = true;\n    updateStatusBar();\n  }\n  \n  // Ctrl+S to save\n  if (e.ctrlKey && e.key === 's') {\n    e.preventDefault();\n    saveFile();\n  }\n};\n\n// Focus the editor\ntextarea.focus();\n\n// Functions\nfunction updateStatusBar() {\n  var fileName = state.currentFile ? state.currentFile.split('/').pop() : 'New File';\n  statusBar.textContent = fileName + (state.modified ? ' *' : '');\n}\n\nfunction togglePreview() {\n  if (state.showPreview && state.markdownMode) {\n    previewPanel.style.display = 'block';\n    renderMarkdown();\n  } else {\n    previewPanel.style.display = 'none';\n  }\n}\n\nfunction renderMarkdown() {\n  var html = state.content\n    // Headers\n    .replace(/^### (.+)$/gm, '<h3>$1</h3>')\n    .replace(/^## (.+)$/gm, '<h2>$1</h2>')\n    .replace(/^# (.+)$/gm, '<h1>$1</h1>')\n    // Bold and italic\n    .replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>')\n    .replace(/\\*(.+?)\\*/g, '<em>$1</em>')\n    // Code\n    .replace(/`(.+?)`/g, '<code>$1</code>')\n    // Lists\n    .replace(/^- (.+)$/gm, '<li>$1</li>')\n    // Links\n    .replace(/\\[(.+?)\\]\\((.+?)\\)/g, '<a href=\"$2\">$1</a>')\n    // Paragraphs\n    .replace(/^(?!<[h|l])(.+)$/gm, '<p>$1</p>');\n  \n  previewPanel.innerHTML = html;\n}\n\nfunction newFile() {\n  if (state.modified) {\n    var save = app.api.ui.confirm('Save changes?');\n    if (save) {\n      saveFile(function() { resetEditor(); });\n      return;\n    }\n  }\n  resetEditor();\n}\n\nfunction resetEditor() {\n  state.currentFile = null;\n  state.content = '';\n  state.modified = false;\n  textarea.value = '';\n  updateStatusBar();\n}\n\nfunction openFile() {\n  if (state.modified) {\n    var save = app.api.ui.confirm('Save changes?');\n    if (save) {\n      saveFile(function() { showOpenDialog(); });\n      return;\n    }\n  }\n  showOpenDialog();\n}\n\nfunction showOpenDialog() {\n  var files = app.api.fs.listFiles('/Documents');\n  \n  if (!files || files.length === 0) {\n    app.api.ui.alert('No files found in Documents folder');\n    return;\n  }\n  \n  var fileList = 'Select a file to open:\\n\\n';\n  var textFiles = [];\n  \n  for (var i = 0; i < files.length; i++) {\n    var file = files[i];\n    if (file.type === 'file') {\n      if (file.name.endsWith('.txt') || file.name.endsWith('.md') || \n          file.name.endsWith('.js') || file.name.endsWith('.json')) {\n        textFiles.push(file);\n        fileList += (textFiles.length) + '. ' + file.name + '\\n';\n      }\n    }\n  }\n  \n  if (textFiles.length === 0) {\n    app.api.ui.alert('No text files found');\n    return;\n  }\n  \n  var fileIndex = app.api.ui.prompt(fileList + '\\nEnter file number:');\n  if (!fileIndex) return;\n  \n  var selectedFile = textFiles[parseInt(fileIndex) - 1];\n  if (!selectedFile) {\n    app.api.ui.alert('Invalid selection');\n    return;\n  }\n  \n  loadFile(selectedFile.path);\n}\n\nfunction loadFile(path) {\n  try {\n    var content = app.api.fs.readFile(path);\n    if (content === null) {\n      app.api.ui.alert('Could not read file');\n      return;\n    }\n    \n    state.currentFile = path;\n    state.content = content;\n    state.modified = false;\n    textarea.value = content;\n    \n    // Auto-detect markdown\n    if (path.endsWith('.md')) {\n      state.markdownMode = true;\n      markdownBtn.style.opacity = '1';\n    }\n    \n    updateStatusBar();\n    textarea.focus();\n  } catch (error) {\n    app.api.ui.alert('Error: ' + error.message);\n  }\n}\n\nfunction saveFile(callback) {\n  if (!state.currentFile) {\n    saveFileAs(callback);\n    return;\n  }\n  \n  try {\n    app.api.fs.writeFile(state.currentFile, state.content);\n    state.modified = false;\n    updateStatusBar();\n    app.api.ui.showNotification('File saved');\n    if (callback) callback();\n  } catch (error) {\n    app.api.ui.alert('Error: ' + error.message);\n  }\n}\n\nfunction saveFileAs(callback) {\n  var fileName = app.api.ui.prompt('Enter file name:', \n    state.currentFile ? state.currentFile.split('/').pop() : 'untitled.txt');\n  \n  if (!fileName) return;\n  \n  // Add extension if needed\n  if (!fileName.includes('.')) {\n    fileName += state.markdownMode ? '.md' : '.txt';\n  }\n  \n  var filePath = '/Documents/' + fileName;\n  \n  try {\n    if (app.api.fs.fileExists(filePath)) {\n      var overwrite = app.api.ui.confirm(fileName + ' already exists. Overwrite?');\n      if (!overwrite) return;\n    }\n    \n    app.api.fs.writeFile(filePath, state.content);\n    state.currentFile = filePath;\n    state.modified = false;\n    updateStatusBar();\n    app.api.ui.showNotification('File saved as: ' + fileName);\n    if (callback) callback();\n  } catch (error) {\n    app.api.ui.alert('Error: ' + error.message);\n  }\n}\n\nfunction showHelp() {\n  var helpText = 'VINTAGE TEXT EDITOR HELP\\n\\n' +\n    'FEATURES:\\n' +\n    '- Basic text editing\\n' +\n    '- Markdown support with preview\\n' +\n    '- TAB key inserts spaces\\n' +\n    '- Ctrl+S to save\\n\\n' +\n    'MARKDOWN SYNTAX:\\n' +\n    '# Header 1\\n' +\n    '## Header 2\\n' +\n    '### Header 3\\n' +\n    '**Bold text**\\n' +\n    '*Italic text*\\n' +\n    '`Code`\\n' +\n    '- List item\\n' +\n    '[Link text](URL)\\n\\n' +\n    'APP DEVELOPMENT GUIDE:\\n' +\n    'To create apps for Vintage Mathematical OS:\\n\\n' +\n    '1. Create a JSON file with:\\n' +\n    '   - id: Unique identifier\\n' +\n    '   - name: Display name\\n' +\n    '   - version: App version\\n' +\n    '   - icon: Text icon\\n' +\n    '   - description: App description\\n' +\n    '   - author: Your name\\n' +\n    '   - desktopIcon: true/false\\n' +\n    '   - code: Your app code\\n\\n' +\n    '2. Use the app object to access:\\n' +\n    '   - app.rootElement: UI container\\n' +\n    '   - app.api.fs: File system operations\\n' +\n    '   - app.api.ui: User interface helpers\\n' +\n    '   - app.api.storage: App data storage\\n\\n' +\n    '3. Handle errors with try/catch\\n' +\n    '4. Follow system theme using CSS variables\\n' +\n    '5. Clean up resources when app closes';\n  \n  app.api.ui.alert(helpText);\n}"
}